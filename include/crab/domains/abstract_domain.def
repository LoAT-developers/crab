#define UNAVAILABLE_DOMAIN(Msg)                                                \
  using abstract_domain_t = abstract_domain_api<this_type>;                    \
  using typename abstract_domain_t::disjunctive_linear_constraint_system_t;    \
  using typename abstract_domain_t::linear_constraint_system_t;                \
  using typename abstract_domain_t::linear_constraint_t;                       \
  using typename abstract_domain_t::linear_expression_t;                       \
  using typename abstract_domain_t::reference_constraint_t;                    \
  using typename abstract_domain_t::variable_t;                                \
  using typename abstract_domain_t::variable_or_constant_t;                    \
  using typename abstract_domain_t::variable_vector_t;                         \
  using typename abstract_domain_t::variable_or_constant_vector_t;             \
  using typename abstract_domain_t::interval_t;                                \
  using number_t = N;                                                          \
  using varname_t = V;                                                         \
  void set_to_top() override { CRAB_ERROR(Msg); }                              \
  void set_to_bottom() override { CRAB_ERROR(Msg); }                           \
  this_type make_bottom() const override { CRAB_ERROR(Msg); }                  \
  this_type make_top() const override { CRAB_ERROR(Msg); }                     \
  bool is_bottom() const override { CRAB_ERROR(Msg); }                         \
  bool is_top() const override { CRAB_ERROR(Msg); }                            \
  bool operator<=(const this_type &other) const override { CRAB_ERROR(Msg); }  \
  void operator|=(const this_type &other) override { CRAB_ERROR(Msg); }        \
  this_type operator|(const this_type &other) const override {                 \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  this_type operator&(const this_type &other) const override {                 \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  this_type operator||(const this_type &other) const override {                \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  this_type widening_thresholds(const this_type &e,                            \
                                const iterators::thresholds<number_t> &ts)     \
      const override {                                                         \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  this_type operator&&(const this_type &other) const override {                \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void operator-=(const variable_t &var) override { CRAB_ERROR(Msg); }         \
  interval_t operator[](const variable_t &v) override { CRAB_ERROR(Msg); }     \
  void operator+=(const linear_constraint_system_t &csts) override {           \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void assign(const variable_t &x, const linear_expression_t &e) override {    \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply(arith_operation_t op, const variable_t &x, const variable_t &y,   \
             number_t z) override {                                            \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply(arith_operation_t op, const variable_t &x, const variable_t &y,   \
             const variable_t &z) override {                                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply(int_conv_operation_t op, const variable_t &dst,                   \
             const variable_t &src) override {                                 \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply(bitwise_operation_t op, const variable_t &x, const variable_t &y, \
             const variable_t &z) override {                                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply(bitwise_operation_t op, const variable_t &x, const variable_t &y, \
             number_t k) override {                                            \
    CRAB_ERROR(Msg);                                                           \
  }									       \
  void select(const variable_t &lhs, const linear_constraint_t &cond,	       \
	      const linear_expression_t &e1,  const linear_expression_t &e2) override { \
    CRAB_ERROR(Msg);                                                           \
  }									       \
  void backward_assign(const variable_t &x, const linear_expression_t &e,      \
                       const this_type &invariant) override {                  \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_apply(arith_operation_t op, const variable_t &x,               \
                      const variable_t &y, number_t z,                         \
                      const this_type &invariant) override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_apply(arith_operation_t op, const variable_t &x,               \
                      const variable_t &y, const variable_t &z,                \
                      const this_type &invariant) override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void assign_bool_cst(const variable_t &lhs, const linear_constraint_t &rhs)  \
      override {                                                               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void assign_bool_ref_cst(const variable_t &lhs, const reference_constraint_t &rhs)  \
      override {                                                               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void assign_bool_var(const variable_t &lhs, const variable_t &rhs,           \
                       bool is_not_rhs) override {                             \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void apply_binary_bool(bool_operation_t op, const variable_t &x,             \
                         const variable_t &y, const variable_t &z) override {  \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void assume_bool(const variable_t &v, bool is_negated) override {            \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void select_bool(const variable_t &lhs, const variable_t &cond,	       \
                   const variable_t &b1, const variable_t &b2) override {      \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_assign_bool_cst(const variable_t &lhs,                         \
                                const linear_constraint_t &rhs,                \
                                const this_type &invariant) override {         \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_assign_bool_ref_cst(const variable_t &lhs,                     \
                                    const reference_constraint_t &rhs,         \
                                    const this_type &invariant) override {     \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_assign_bool_var(const variable_t &lhs, const variable_t &rhs,  \
                                bool is_not_rhs, const this_type &invariant)   \
      override {                                                               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_apply_binary_bool(bool_operation_t op, const variable_t &x,    \
                                  const variable_t &y, const variable_t &z,    \
                                  const this_type &invariant) override {       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void array_init(const variable_t &a, const linear_expression_t &elem_size,   \
                  const linear_expression_t &lb_idx,                           \
                  const linear_expression_t &ub_idx,                           \
                  const linear_expression_t &val) override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void array_load(const variable_t &lhs, const variable_t &a,                  \
                  const linear_expression_t &elem_size,                        \
                  const linear_expression_t &i) override {                     \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void array_store(const variable_t &a, const linear_expression_t &elem_size,  \
                   const linear_expression_t &i, const linear_expression_t &v, \
                   bool is_strong_update) override {                           \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void array_store_range(                                                      \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &j,              \
      const linear_expression_t &v) override {                                 \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void array_assign(const variable_t &lhs, const variable_t &rhs) override {   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_array_init(                                                    \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &lb_idx, const linear_expression_t &ub_idx,    \
      const linear_expression_t &val, const this_type &invariant) override {   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_array_load(const variable_t &lhs, const variable_t &a,         \
                           const linear_expression_t &elem_size,               \
                           const linear_expression_t &i,                       \
                           const this_type &invariant) override {              \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_array_store(                                                   \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &v,              \
      bool is_strong_update, const this_type &invariant) override {            \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_array_store_range(                                             \
      const variable_t &a, const linear_expression_t &elem_size,               \
      const linear_expression_t &i, const linear_expression_t &j,              \
      const linear_expression_t &v, const this_type &invariant) override {     \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_array_assign(const variable_t &lhs, const variable_t &rhs,     \
                             const this_type &invariant) override {            \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void region_init(const variable_t &reg) override { CRAB_ERROR(Msg); }        \
  void region_copy(const variable_t &lhs_reg,                                  \
                   const variable_t &rhs_reg) override {   		       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void region_cast(const variable_t &src,                                      \
                   const variable_t &dst) override {   		               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_make(const variable_t &ref, const variable_t &reg,                  \
                const variable_or_constant_t &size,                            \
                const allocation_site &as) override {                          \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_free(const variable_t &reg, const variable_t &ref) override {       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_load(const variable_t &ref, const variable_t &reg,                  \
                const variable_t &res) override {			       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_store(const variable_t &ref, const variable_t &reg,                 \
                 const variable_or_constant_t &val) override {                 \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_gep(const variable_t &ref1, const variable_t &reg1,                 \
               const variable_t &ref2, const variable_t &reg2,                 \
               const linear_expression_t &offset) override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_load_from_array(const variable_t &lhs, const variable_t &ref,       \
                           const variable_t &region,                           \
                           const linear_expression_t &index,                   \
                           const linear_expression_t &elem_size) override {    \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_store_to_array(const variable_t &ref, const variable_t &region,     \
                          const linear_expression_t &index,                    \
                          const linear_expression_t &elem_size,                \
                          const linear_expression_t &val) override {           \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void ref_assume(const reference_constraint_t &cst) override {                \
    CRAB_ERROR(Msg);                                                           \
  }         								       \
  void ref_to_int(const variable_t &reg, const variable_t &ref,                \
                  const variable_t &int_var) override {   	       	       \
    CRAB_ERROR(Msg);                                                           \
  }         								       \
  void int_to_ref(const variable_t &int_var,				       \
       	          const variable_t &reg, const variable_t &ref) override {     \
    CRAB_ERROR(Msg);                                                           \
  }         								       \
  void select_ref(const variable_t &lhs_ref, const variable_t &lhs_rgn,        \
    const variable_t &cond,						       \
    const variable_or_constant_t &ref1,					       \
    const boost::optional<variable_t> &rgn1,				       \
    const variable_or_constant_t &ref2,					       \
    const boost::optional<variable_t> &rgn2) override {			       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  boolean_value is_null_ref(const variable_t &ref) override {                  \
    CRAB_ERROR(Msg);                                                           \
  }        								       \
  bool get_allocation_sites(const variable_t &ref,  			       \
                    std::vector<allocation_site> &alloc_sites) override {      \
    CRAB_ERROR(Msg);  		      		    	     		       \
  }                                                                            \
  bool get_tags(const variable_t &rng, const variable_t &ref,	               \
    std::vector<uint64_t> &out) override {		                       \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  linear_constraint_system_t to_linear_constraint_system() const override {    \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  disjunctive_linear_constraint_system_t                                       \
  to_disjunctive_linear_constraint_system() const override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void forget(const variable_vector_t &variables) override {                   \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void project(const variable_vector_t &variables) override {                  \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void expand(const variable_t &var, const variable_t &new_var) override {     \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void normalize() override { CRAB_ERROR(Msg); }                               \
  void minimize() override { CRAB_ERROR(Msg); }                                \
  void rename(const variable_vector_t &from, const variable_vector_t &to)      \
      override {                                                               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void intrinsic(std::string name, const variable_or_constant_vector_t &inputs,  \
                 const variable_vector_t &outputs) override {                  \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void backward_intrinsic(std::string name, const variable_or_constant_vector_t &inputs, \
                          const variable_vector_t &outputs,                    \
                          const this_type &invariant) override {               \
    CRAB_ERROR(Msg);                                                           \
  }                                                                            \
  void write(crab_os &o) const override { CRAB_ERROR(Msg); }                   \
  std::string domain_name() const override { return "Unavailable domain"; }
